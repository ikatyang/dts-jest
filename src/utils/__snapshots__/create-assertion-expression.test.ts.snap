// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should return correctly 1`] = `
Array [
  Array [
    "Math.max(1, 2, 3)",
    Array [
      "test(\\"(type) should show report\\", function () { console.log(<get_type_report_expression>) })",
      "test(\\"(type) should not throw error\\", function () { expect(function () { <get_type_inference_or_throw_diagnostic_expression> }).not.toThrowError() })",
      "test(\\"(type) should match snapshot\\", function () { expect(<get_type_inference_or_diagnostic_expression>).toMatchSnapshot() })",
      "test(\\"(value) should equal to 3\\", function () { expect(Math.max(1, 2, 3)).toEqual(3) })",
    ],
  ],
  Array [
    "Math.abs(-1)",
    Array [
      "test(\\"(type) should throw error\\", function () { expect(function () { <get_type_inference_or_throw_diagnostic_expression> }).toThrowError() })",
      "test(\\"(value) should show report\\", function () { console.log(<get_value_report_expression>) })",
    ],
  ],
  Array [
    "Math.cos(Math.PI)",
    Array [
      "test(\\"(value) should not throw error\\", function () { expect(function () { Math.cos(Math.PI) }).not.toThrowError() })",
    ],
  ],
  Array [
    "Math.tan(Math.PI)",
    Array [
      "test(\\"(value) should throw error\\", function () { expect(function () { Math.tan(Math.PI) }).toThrowError() })",
    ],
  ],
  Array [
    "Math.sin(Math.PI)",
    Array [
      "test(\\"(type) should show report\\", function () { console.log(<get_type_report_expression>) })",
      "test(\\"(type) should not throw error\\", function () { expect(function () { <get_type_inference_or_throw_diagnostic_expression> }).not.toThrowError() })",
      "test(\\"(type) should match snapshot\\", function () { expect(<get_type_inference_or_diagnostic_expression>).toMatchSnapshot() })",
      "test(\\"(value) should show report\\", function () { console.log(<get_value_report_expression>) })",
    ],
  ],
  Array [
    "Object.assign({ a: 1 }, { b: 2 }, { c: 3 })",
    Array [
      "test(\\"(type) should match snapshot\\", function () { expect(<get_type_inference_or_diagnostic_expression>).toMatchSnapshot() })",
      "test(\\"(value) should equal to { a: 1, b: 2, c: 3, }\\", function () { expect(Object.assign({ a: 1 }, { b: 2 }, { c: 3 })).toEqual({ a: 1, b: 2, c: 3, }) })",
    ],
  ],
  Array [
    "Math.min(3, 2, 1)",
    Array [],
  ],
]
`;
