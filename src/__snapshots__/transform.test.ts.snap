// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should retain line number while transforming 1`] = `
"<create_setup_expression>;// @dts-jest:pass
describe(\\"Object.assign({\\\\n    a: 1,\\\\n  }, {\\\\n    b: 2,\\\\n  }, {\\\\n    c: 3,\\\\n  })\\", function () { test(\\"(type) should not throw error\\", function () { expect(function () { _dts_jest_runtime_.get_type_inference_or_throw_diagnostic(1) }).not.toThrowError() });test(\\"(value) should equal to 123\\", function () { expect(Object.assign({ a: 1, }, { b: 2, }, { c: 3, })).toEqual(123) }) })





 //=> 123

// @dts-jest:pass
describe(\\"Object.assign({\\\\n    a: 1,\\\\n  }, {\\\\n    b: 2,\\\\n  }, {\\\\n    c: 3,\\\\n  })\\", function () { test(\\"(type) should not throw error\\", function () { expect(function () { _dts_jest_runtime_.get_type_inference_or_throw_diagnostic(10) }).not.toThrowError() });test(\\"(value) should equal to { a: 1, b: 2, c: 3, }\\", function () { expect(Object.assign({ a: 1, }, { b: 2, }, { c: 3, })).toEqual({ a: 1, b: 2, c: 3, }) }) })





 /*=>
  {
    a: 1,
    b: 2,
    c: 3,
  }
*/
"
`;

exports[`should transform correctly with { test_type: false, test_value: false } 1`] = `
"<create_setup_expression>;
describe(\\"Math.max(1)\\", function () {  })

describe(\\"A\\", function () { 


describe(\\"Math.max(2)\\", function () {  })


describe(\\"Math.max(3)\\", function () {  })

 });describe(\\"B\\", function () { 


describe(\\"Math.max(4)\\", function () {  })


describe(\\"Object.assign({\\\\n      a: 1,\\\\n    }, {\\\\n      b: 2,\\\\n    }, {\\\\n      c: 3,\\\\n    })\\", function () {  })












 });"
`;

exports[`should transform correctly with { test_type: false, test_value: true } 1`] = `
"<create_setup_expression>;// @dts-jest:pass
describe(\\"Math.max(1)\\", function () { test(\\"(value) should equal to 1\\", function () { expect(Math.max(1)).toEqual(1) }) }) //=> 1

describe(\\"A\\", function () { // @dts-jest:group A

// @dts-jest:pass
describe(\\"Math.max(2)\\", function () { test(\\"(value) should equal to 2\\", function () { expect(Math.max(2)).toEqual(2) }) }) //=> 2

// @dts-jest:pass
describe(\\"Math.max(3)\\", function () { test(\\"(value) should equal to 3\\", function () { expect(Math.max(3)).toEqual(3) }) }) //=> 3

 });describe(\\"B\\", function () { // @dts-jest:group B

// @dts-jest:show
describe(\\"Math.max(4)\\", function () { test(\\"(value) should show report\\", function () { console.log(_dts_jest_runtime_.get_value_report(14, function () { return Math.max(4) })) }) }) //=> ?

// @dts-jest:pass
describe(\\"Object.assign({\\\\n      a: 1,\\\\n    }, {\\\\n      b: 2,\\\\n    }, {\\\\n      c: 3,\\\\n    })\\", function () { test(\\"(value) should equal to { a: 1, b: 2, c: 3, }\\", function () { expect(Object.assign({ a: 1, }, { b: 2, }, { c: 3, })).toEqual({ a: 1, b: 2, c: 3, }) }) })





 /*=>
  {
    a: 1,
    b: 2,
    c: 3,
  }
*/
 });"
`;

exports[`should transform correctly with { test_type: true, test_value: false } 1`] = `
"<create_setup_expression>;
describe(\\"Math.max(1)\\", function () { test(\\"(type) should not throw error\\", function () { expect(function () { _dts_jest_runtime_.get_type_inference_or_throw_diagnostic(1) }).not.toThrowError() }) })

describe(\\"A\\", function () { 


describe(\\"Math.max(2)\\", function () { test(\\"(type) should not throw error\\", function () { expect(function () { _dts_jest_runtime_.get_type_inference_or_throw_diagnostic(6) }).not.toThrowError() }) })


describe(\\"Math.max(3)\\", function () { test(\\"(type) should not throw error\\", function () { expect(function () { _dts_jest_runtime_.get_type_inference_or_throw_diagnostic(9) }).not.toThrowError() }) })

 });describe(\\"B\\", function () { 


describe(\\"Math.max(4)\\", function () { test(\\"(type) should show report\\", function () { console.log(_dts_jest_runtime_.get_type_report(14)) }) })


describe(\\"Object.assign({\\\\n      a: 1,\\\\n    }, {\\\\n      b: 2,\\\\n    }, {\\\\n      c: 3,\\\\n    })\\", function () { test(\\"(type) should not throw error\\", function () { expect(function () { _dts_jest_runtime_.get_type_inference_or_throw_diagnostic(17) }).not.toThrowError() }) })












 });"
`;

exports[`should transform correctly with { test_type: true, test_value: true } 1`] = `
"<create_setup_expression>;// @dts-jest:pass
describe(\\"Math.max(1)\\", function () { test(\\"(type) should not throw error\\", function () { expect(function () { _dts_jest_runtime_.get_type_inference_or_throw_diagnostic(1) }).not.toThrowError() });test(\\"(value) should equal to 1\\", function () { expect(Math.max(1)).toEqual(1) }) }) //=> 1

describe(\\"A\\", function () { // @dts-jest:group A

// @dts-jest:pass
describe(\\"Math.max(2)\\", function () { test(\\"(type) should not throw error\\", function () { expect(function () { _dts_jest_runtime_.get_type_inference_or_throw_diagnostic(6) }).not.toThrowError() });test(\\"(value) should equal to 2\\", function () { expect(Math.max(2)).toEqual(2) }) }) //=> 2

// @dts-jest:pass
describe(\\"Math.max(3)\\", function () { test(\\"(type) should not throw error\\", function () { expect(function () { _dts_jest_runtime_.get_type_inference_or_throw_diagnostic(9) }).not.toThrowError() });test(\\"(value) should equal to 3\\", function () { expect(Math.max(3)).toEqual(3) }) }) //=> 3

 });describe(\\"B\\", function () { // @dts-jest:group B

// @dts-jest:show
describe(\\"Math.max(4)\\", function () { test(\\"(type) should show report\\", function () { console.log(_dts_jest_runtime_.get_type_report(14)) });test(\\"(value) should show report\\", function () { console.log(_dts_jest_runtime_.get_value_report(14, function () { return Math.max(4) })) }) }) //=> ?

// @dts-jest:pass
describe(\\"Object.assign({\\\\n      a: 1,\\\\n    }, {\\\\n      b: 2,\\\\n    }, {\\\\n      c: 3,\\\\n    })\\", function () { test(\\"(type) should not throw error\\", function () { expect(function () { _dts_jest_runtime_.get_type_inference_or_throw_diagnostic(17) }).not.toThrowError() });test(\\"(value) should equal to { a: 1, b: 2, c: 3, }\\", function () { expect(Object.assign({ a: 1, }, { b: 2, }, { c: 3, })).toEqual({ a: 1, b: 2, c: 3, }) }) })





 /*=>
  {
    a: 1,
    b: 2,
    c: 3,
  }
*/
 });"
`;

exports[`should transform to commonjs if set 1`] = `
"<create_setup_expression>;\\"use strict\\";
exports.__esModule = true;
var path = require(\\"path\\");
// @dts-jest
describe(\\"path.basename('path/to/somewhere')\\", function () { test(\\"(value) should equal to \\\\\\"somewhere\\\\\\"\\", function () { expect(path.basename(\\"path/to/somewhere\\")).toEqual(\\"somewhere\\"); }); }); //=> 'somewhere'
"
`;

exports[`should transform to fake environment for no-footers even if test_value = true 1`] = `
"<create_setup_expression>;
describe(\\"Math.max(1)\\", function () { test(\\"(type) should not throw error\\", function () { expect(function () { _dts_jest_runtime_.get_type_inference_or_throw_diagnostic(1) }).not.toThrowError() }) })

describe(\\"A\\", function () { 


describe(\\"Math.max(2)\\", function () { test(\\"(type) should not throw error\\", function () { expect(function () { _dts_jest_runtime_.get_type_inference_or_throw_diagnostic(6) }).not.toThrowError() }) })


describe(\\"Math.max(3)\\", function () { test(\\"(type) should not throw error\\", function () { expect(function () { _dts_jest_runtime_.get_type_inference_or_throw_diagnostic(9) }).not.toThrowError() }) })

 });describe(\\"B\\", function () { 


describe(\\"Math.max(4)\\", function () { test(\\"(type) should not throw error\\", function () { expect(function () { _dts_jest_runtime_.get_type_inference_or_throw_diagnostic(14) }).not.toThrowError() }) })


describe(\\"Object.assign({ a: 1 }, { b: 2 }, { c: 3 })\\", function () { test(\\"(type) should not throw error\\", function () { expect(function () { _dts_jest_runtime_.get_type_inference_or_throw_diagnostic(17) }).not.toThrowError() }) })
 });"
`;
